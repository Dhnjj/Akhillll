For the above application create authorized end points using JWT (JSON Web Token). https://www.loginradius.com/blog/engineering/nodejs-and-mongodb-application-authentication-by- jwt/
npm install express mongoose bcrypt --save Create a directory structure as follows: JWTAPP

-api
--models
----userModel.js
--controllers
----userController.js
--route
----userRoute.js
--server.js

var mongoose = require('mongoose'), bcrypt = require('bcrypt'),
Schema = mongoose.Schema;

var UserSchema = new Schema({ fullName: { 
type: String, trim: true, required: true
},
email: {
type: String, unique: true, lowercase: true, trim: true, required: true
},
hash_password: { type: String
},
created: { type: Date,
default: Date.now
}
});

UserSchema.methods.comparePassword = function(password) { return bcrypt.compareSync(password, this.hash_password);
};

mongoose.model('User', UserSchema);

Create the user handlers 'use strict';

var mongoose = require('mongoose'), jwt = require('jsonwebtoken'),
bcrypt = require('bcrypt'),
User = mongoose.model('User');

exports.register = function(req, res) { var newUser = new User(req.body);
newUser.hash_password = bcrypt.hashSync(req.body.password, 10); newUser.save(function(err, user) {
if (err) {
return res.status(400).send({ message: err
});
} else {
user.hash_password = undefined; return res.json(user);
}
});
};exports.sign_in = function(req, res) { User.findOne({
email: req.body.email
}, function(err, user) { if (err) throw err;
if (!user || !user.comparePassword(req.body.password)) {
return res.status(401).json({ message: 'Authentication failed. Invalid user or password.' });
}
return res.json({ token: jwt.sign({ email: user.email, fullName: user.fullName, _id: user._id }, 'RESTFULAPIs') });
});
};

exports.loginRequired = function(req, res, next) { if (req.user) {
next();
} else {

return res.status(401).json({ message: 'Unauthorized user!!' });
}
};
exports.profile = function(req, res, next) { if (req.user) {
res.send(req.user); next();
}
else {
return res.status(401).json({ message: 'Invalid token' });
}
};

In the api/route folder, create a file called user userRoute.js and add the following code: 'use strict';
module.exports = function(app) {
varuserHandlers = require('../controllers/userController.js');
// todoList Routes app.route('/tasks')
.post(userHandlers.loginRequired, userHandlers.profile); app.route('/auth/register')
.post(userHandlers.register); app.route('/auth/sign_in')
.post(userHandlers.sign_in);
};

Add the code to server.js 'use strict';varexpress = require('express'), app = express(),
port = process.env.PORT || 3000,


User = require('./api/models/userModel'), bodyParser = require('body-parser'), jsonwebtoken = require("jsonwebtoken");

constmongoose = require('mongoose'); constoption = { socketTimeoutMS:30000, keepAlive:true,
reconnectTries:30000
};

constmongoURI = process.env.MONGODB_URI; mongoose.connect('mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb', option).then(function(){
//connected successfully
}, function(err) {
//err handle
});

app.use(bodyParser.urlencoded({ extended:true })); app.use(bodyParser.json());

app.use(function(req, res, next) {
if (req.headers&&req.headers.authorization&&req.headers.authorization.split(' ')[0] === 'JWT') { jsonwebtoken.verify(req.headers.authorization.split(' ')[1], 'RESTFULAPIs', function(err, decode) { if (err) req.user = undefined;
req.user = decode; next();
});
} else {
req.user = undefined; next();
}
});
varroutes = require('./api/routes/userRoutes'); routes(app);

app.use(function(req, res) {
res.status(404).send({ url:req.originalUrl + ' not found' })
});

app.listen(port);
console.log(' RESTful API server started on: ' + port); module.exports = app;
Run the project by using the command and try logging by using the JWT. npm start

